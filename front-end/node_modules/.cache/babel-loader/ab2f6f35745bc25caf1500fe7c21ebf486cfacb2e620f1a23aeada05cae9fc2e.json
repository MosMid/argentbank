{"ast":null,"code":"import { configureStore, combineReducers } from \"@reduxjs/toolkit\";\nimport { userSliceReducer } from \"../features/userSlice\";\nimport { authSliceReducer } from \"../features/authSlice\";\nimport { updateSliceReducer } from \"../features/updateSlice\";\nimport { signupSliceReducer } from \"../features/signupSlice\";\nimport storage from \"redux-persist/lib/storage\";\nimport { persistReducer, createMigrate } from \"redux-persist\";\nimport hardSet from \"redux-persist/es/stateReconciler/hardSet\";\nimport autoMergeLevel2 from \"redux-persist/lib/stateReconciler/autoMergeLevel2\";\nconst migrations = {\n  0: state => {\n    // migration clear out device state\n    return {\n      ...state,\n      device: undefined\n    };\n  },\n  1: state => {\n    // migration to keep only device state\n    return {\n      device: state.device\n    };\n  }\n};\nconst persistConfig = {\n  key: \"root\",\n  version: 1,\n  storage,\n  migrate: createMigrate(migrations, {\n    debug: false\n  })\n};\nconst reducer = combineReducers({\n  user: userSliceReducer,\n  auth: authSliceReducer,\n  signup: signupSliceReducer,\n  update: updateSliceReducer\n});\nconst persistedReducer = persistReducer(persistConfig, reducer);\nexport const store = configureStore({\n  reducer: persistedReducer\n});\n\n/* export const store = configureStore({\n    reducer: {\n        user: userSliceReducer,\n        auth: authSliceReducer,\n        signup: signupSliceReducer,\n        update: updateSliceReducer\n    }\n}) */","map":{"version":3,"names":["configureStore","combineReducers","userSliceReducer","authSliceReducer","updateSliceReducer","signupSliceReducer","storage","persistReducer","createMigrate","hardSet","autoMergeLevel2","migrations","state","device","undefined","persistConfig","key","version","migrate","debug","reducer","user","auth","signup","update","persistedReducer","store"],"sources":["/home/mehdi/Documents/nammi/src/app/store.js"],"sourcesContent":["import { configureStore, combineReducers } from \"@reduxjs/toolkit\";\nimport { userSliceReducer } from \"../features/userSlice\";\nimport { authSliceReducer } from \"../features/authSlice\";\nimport { updateSliceReducer } from \"../features/updateSlice\";\nimport { signupSliceReducer } from \"../features/signupSlice\";\nimport storage from \"redux-persist/lib/storage\";\nimport { persistReducer, createMigrate } from \"redux-persist\";\nimport hardSet from \"redux-persist/es/stateReconciler/hardSet\";\nimport autoMergeLevel2 from \"redux-persist/lib/stateReconciler/autoMergeLevel2\";\n\n\nconst migrations = {\n    0: (state) => {\n      // migration clear out device state\n      return {\n        ...state,\n        device: undefined   \n      }\n    },\n    1: (state) => {\n      // migration to keep only device state\n      return {\n        device: state.device\n      }\n    }\n}\n\nconst persistConfig = {\n    key: \"root\",\n    version: 1,\n    storage,\n    migrate: createMigrate(migrations, { debug: false }),\n};\n\nconst reducer = combineReducers({\n    user: userSliceReducer,\n    auth: authSliceReducer,\n    signup: signupSliceReducer,\n    update: updateSliceReducer\n})\n\nconst persistedReducer = persistReducer(persistConfig, reducer)\n\nexport const store = configureStore({\n    reducer: persistedReducer\n})\n\n/* export const store = configureStore({\n    reducer: {\n        user: userSliceReducer,\n        auth: authSliceReducer,\n        signup: signupSliceReducer,\n        update: updateSliceReducer\n    }\n}) */"],"mappings":"AAAA,SAASA,cAAc,EAAEC,eAAe,QAAQ,kBAAkB;AAClE,SAASC,gBAAgB,QAAQ,uBAAuB;AACxD,SAASC,gBAAgB,QAAQ,uBAAuB;AACxD,SAASC,kBAAkB,QAAQ,yBAAyB;AAC5D,SAASC,kBAAkB,QAAQ,yBAAyB;AAC5D,OAAOC,OAAO,MAAM,2BAA2B;AAC/C,SAASC,cAAc,EAAEC,aAAa,QAAQ,eAAe;AAC7D,OAAOC,OAAO,MAAM,0CAA0C;AAC9D,OAAOC,eAAe,MAAM,mDAAmD;AAG/E,MAAMC,UAAU,GAAG;EACf,CAAC,EAAGC,KAAK,IAAK;IACZ;IACA,OAAO;MACL,GAAGA,KAAK;MACRC,MAAM,EAAEC;IACV,CAAC;EACH,CAAC;EACD,CAAC,EAAGF,KAAK,IAAK;IACZ;IACA,OAAO;MACLC,MAAM,EAAED,KAAK,CAACC;IAChB,CAAC;EACH;AACJ,CAAC;AAED,MAAME,aAAa,GAAG;EAClBC,GAAG,EAAE,MAAM;EACXC,OAAO,EAAE,CAAC;EACVX,OAAO;EACPY,OAAO,EAAEV,aAAa,CAACG,UAAU,EAAE;IAAEQ,KAAK,EAAE;EAAM,CAAC;AACvD,CAAC;AAED,MAAMC,OAAO,GAAGnB,eAAe,CAAC;EAC5BoB,IAAI,EAAEnB,gBAAgB;EACtBoB,IAAI,EAAEnB,gBAAgB;EACtBoB,MAAM,EAAElB,kBAAkB;EAC1BmB,MAAM,EAAEpB;AACZ,CAAC,CAAC;AAEF,MAAMqB,gBAAgB,GAAGlB,cAAc,CAACQ,aAAa,EAAEK,OAAO,CAAC;AAE/D,OAAO,MAAMM,KAAK,GAAG1B,cAAc,CAAC;EAChCoB,OAAO,EAAEK;AACb,CAAC,CAAC;;AAEF;AACA;AACA;AACA;AACA;AACA;AACA;AACA"},"metadata":{},"sourceType":"module","externalDependencies":[]}